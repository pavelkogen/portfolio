#!/usr/bin/env python3

###########################################################
#                FILE GENERATED BY ANSIBLE                #
#          ANY MANUAL CHANGES WILL BE DESTROYED           #
###########################################################

import sys, os, shutil, time, re

source_directory = '/syslog'
target_directory = '/var/log/rotator/'
default_days = 30

def asterisk_to_regex(directory):
	# checks an asterisk symbol and uses regex
	if directory.find("*") > -1:
		subdirectories_list = os.listdir(source_directory)
		subdirectories_list_actual = []
		regex = directory.replace("*", "[\s\S]*?")
		for subdirectory in subdirectories_list:
			match = re.match(regex, subdirectory)
			if match != None:
				match = format(match.group(0))
				subdirectories_list_actual.append(match)
		return subdirectories_list_actual
	else: return 0
def cleaning_old_backups(target_subdirectory, days):
	# removes old files in the target directory (or subdirectory)
	date = time.time() - (days * 24 * 60 * 60)
	for entry in os.listdir(target_subdirectory):
		file_path = os.path.join(target_subdirectory, entry)
		if os.path.isfile(file_path):
			if os.stat(file_path).st_mtime <= date:
				os.remove(file_path)
				print(file_path + " is deleted")
def do_rotate_logs(directory, days):
	# main function
	if asterisk_to_regex(directory):
		for element in asterisk_to_regex(directory):
			directory_address = os.path.join(source_directory, element)
			target_subdirectory = os.path.join(target_directory, element)

			if os.path.exists(target_subdirectory) == 0:
				os.mkdir(target_subdirectory)
				print(target_subdirectory + " is created")

			for entry in os.listdir(directory_address):
				file_address = os.path.join(directory_address, entry)
				if entry.endswith('.gz'):
					# move .gz to the target directory for asterisk
					shutil.move(file_address, os.path.join(target_subdirectory, entry))
					print(file_address + " is moved")

			cleaning_old_backups(target_subdirectory, days)
	else:
		directory_address = os.path.join(source_directory, directory)
		target_subdirectory = os.path.join(target_directory, directory)

		if os.path.exists(target_subdirectory) == 0:
				os.mkdir(target_subdirectory)
				print(target_subdirectory + " is created")

		for entry in os.listdir(directory_address):
				file_address = os.path.join(directory_address, entry)
				if entry.endswith('.gz'):
					# move .gz to the target directory
					shutil.move(file_address, os.path.join(target_subdirectory, entry))
					print(file_address + " is moved")

		cleaning_old_backups(target_subdirectory, days)
if __name__ == "__main__":
	if len(sys.argv) == 3:
		directory = sys.argv[1]
		days = int(sys.argv[2])
		do_rotate_logs(directory, days)
	else:
		# if days are not defined = 30
		directory = sys.argv[1]
		days = default_days
		do_rotate_logs(directory, days)

